{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Levit\\\\WebstormProjects\\\\PetRecs\\\\client\\\\src\\\\components\\\\Register.js\";\n// Register.js\nimport React, { useState } from 'react';\nimport Form from 'react-bootstrap/Form';\nimport Button from 'react-bootstrap/Button';\nimport axios from 'axios';\nimport { useForm } from \"react-hook-form\";\nimport { Link } from 'react-router-dom';\n\nfunction Register(props) {\n  const {\n    register,\n    handleSubmit,\n    errors,\n    watch\n  } = useForm();\n\n  const onSubmit = data => {\n    axios.post('/api/accounts', {\n      email: data.email,\n      password: data.password,\n      accountType: data.accountType\n    }).then(res => {\n      console.log(res);\n    }, err => {\n      console.log(err);\n    });\n  };\n\n  const accountOptions = [{\n    value: '',\n    label: 'Select...'\n  }, // default value, cannot be submitted\n  {\n    value: '1',\n    label: 'Pet Owner'\n  }, {\n    value: '2',\n    label: 'Veterinarian'\n  }];\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"fill-window fullPageContainer\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"loginRegPageHeader\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"homePageHeaderItem\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(\"img\", {\n    src: require('../pet-recs-logo_low-qual.png'),\n    width: \"48\",\n    height: \"55\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 21\n    }\n  }), \"PetRecs\")), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"formBox\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"formTitle\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 17\n    }\n  }, \"Create an Account\"), /*#__PURE__*/React.createElement(Form, {\n    onSubmit: handleSubmit(onSubmit),\n    className: \"loginRegForm\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(Form.Group, {\n    controlId: \"formBasicEmail\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(Form.Label, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 25\n    }\n  }, \"E-Mail Address\"), /*#__PURE__*/React.createElement(Form.Control, {\n    name: \"email\",\n    type: \"email\",\n    placeholder: \"example@mail.com\",\n    ref: register({\n      required: true,\n      pattern: {\n        value: /^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,}$/i,\n        message: \"invalid email address\"\n      }\n    }),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 25\n    }\n  }), errors.email && errors.email.message), /*#__PURE__*/React.createElement(Form.Group, {\n    controlId: \"formBasicPassword\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(Form.Label, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 25\n    }\n  }, \"Password\"), /*#__PURE__*/React.createElement(Form.Control, {\n    name: \"password\",\n    type: \"password\",\n    placeholder: \"Password\",\n    ref: register({\n      required: true,\n      minLength: {\n        value: 6,\n        message: \"Password must be at least 6 characters in length\"\n      },\n      maxLength: {\n        value: 20,\n        message: \"Password must be at or under 20 characters in length\"\n      }\n    }),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 25\n    }\n  }), errors.password && (errors.password.message || \"Password is required\")), /*#__PURE__*/React.createElement(Form.Group, {\n    controlId: \"formBasicRepeatPassword\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(Form.Label, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 25\n    }\n  }, \"Repeat Password\"), /*#__PURE__*/React.createElement(Form.Control, {\n    name: \"password_confirm\",\n    type: \"password\",\n    placeholder: \"Password\",\n    ref: register({\n      required: true,\n      validate: value => value === watch('password')\n    }),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 25\n    }\n  }), errors.password_confirm && \"Both passwords must match\"), /*#__PURE__*/React.createElement(Form.Group, {\n    controlId: \"formBasicAccountType\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(Form.Label, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 25\n    }\n  }, \"Account Type\"), /*#__PURE__*/React.createElement(Form.Control, {\n    name: \"accountType\",\n    as: \"select\",\n    ref: register({\n      required: true,\n      validate: value => value !== 'Select...'\n    }),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 25\n    }\n  }, \" \", accountOptions.map((option, label) => {\n    return /*#__PURE__*/React.createElement(\"option\", {\n      value: option.label,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 45\n      }\n    }, option.label);\n  })), errors.accountType && \"Account Type is required\"), /*#__PURE__*/React.createElement(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 21\n    }\n  }), /*#__PURE__*/React.createElement(Button, {\n    variant: \"secondary\",\n    size: \"sm\",\n    className: \"btn-form\",\n    type: \"submit\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 21\n    }\n  }, \"Register\")), /*#__PURE__*/React.createElement(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 17\n    }\n  }), /*#__PURE__*/React.createElement(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 23\n    }\n  }), /*#__PURE__*/React.createElement(Link, {\n    to: \"/\",\n    className: \"btn btn-secondary\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 17\n    }\n  }, \"Register\")));\n}\n\nexport default Register;","map":{"version":3,"sources":["C:/Users/Levit/WebstormProjects/PetRecs/client/src/components/Register.js"],"names":["React","useState","Form","Button","axios","useForm","Link","Register","props","register","handleSubmit","errors","watch","onSubmit","data","post","email","password","accountType","then","res","console","log","err","accountOptions","value","label","require","required","pattern","message","minLength","maxLength","validate","password_confirm","map","option"],"mappings":"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","sourcesContent":["// Register.js\r\n\r\nimport React, {useState} from 'react'\r\nimport Form from 'react-bootstrap/Form';\r\nimport Button from 'react-bootstrap/Button';\r\nimport axios from 'axios';\r\nimport {useForm} from \"react-hook-form\"\r\n\r\nimport { Link } from 'react-router-dom';\r\n\r\nfunction Register(props) {\r\n\r\n    const { register, handleSubmit, errors, watch } = useForm();\r\n    const onSubmit = (data) => {\r\n        axios.post('/api/accounts', {\r\n            email: data.email,\r\n            password: data.password,\r\n            accountType: data.accountType\r\n        })\r\n            .then((res) => {\r\n                console.log(res);\r\n            }, (err) => {\r\n                console.log(err);\r\n            })\r\n    }\r\n\r\n    const accountOptions = [\r\n        { value: '',  label: 'Select...'}, // default value, cannot be submitted\r\n        { value: '1', label: 'Pet Owner' },\r\n        { value: '2', label: 'Veterinarian'}\r\n    ];\r\n\r\n        return (\r\n        <div className=\"fill-window fullPageContainer\">\r\n            <div className=\"loginRegPageHeader\">\r\n                <div className=\"homePageHeaderItem\">\r\n                    <img src={require('../pet-recs-logo_low-qual.png')} width='48' height='55' />\r\n                    PetRecs\r\n                </div>\r\n            </div>\r\n            <div className=\"formBox\">\r\n                <div className=\"formTitle\">\r\n                    Create an Account\r\n                </div>\r\n                <Form onSubmit={handleSubmit(onSubmit)} className=\"loginRegForm\">\r\n                    <Form.Group controlId=\"formBasicEmail\">\r\n                        <Form.Label>E-Mail Address</Form.Label>\r\n                        <Form.Control name=\"email\" type=\"email\" placeholder=\"example@mail.com\"\r\n                                      ref={register(\r\n                                          { required: true,\r\n                                            pattern: {\r\n                                                  value: /^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,}$/i,\r\n                                                  message: \"invalid email address\"\r\n                                              }\r\n                                          })}/>\r\n                        {errors.email && errors.email.message}\r\n                    </Form.Group>\r\n\r\n                    <Form.Group controlId=\"formBasicPassword\">\r\n                        <Form.Label>Password</Form.Label>\r\n                        <Form.Control name=\"password\" type=\"password\" placeholder=\"Password\"\r\n                                      ref={register({ required: true,\r\n                                          minLength: {value: 6, message: \"Password must be at least 6 characters in length\"},\r\n                                          maxLength: {value: 20, message: \"Password must be at or under 20 characters in length\"}\r\n                                      })} />\r\n                        {errors.password && (errors.password.message || \"Password is required\")}\r\n                    </Form.Group>\r\n\r\n                    <Form.Group controlId=\"formBasicRepeatPassword\">\r\n                        <Form.Label>Repeat Password</Form.Label>\r\n                        <Form.Control name=\"password_confirm\" type=\"password\" placeholder=\"Password\"\r\n                                      ref={register({ required: true, validate: value => value === watch('password') })} />\r\n                        {errors.password_confirm && \"Both passwords must match\"}\r\n                    </Form.Group>\r\n\r\n                    <Form.Group controlId=\"formBasicAccountType\">\r\n                        <Form.Label>Account Type</Form.Label>\r\n                        <Form.Control name=\"accountType\" as=\"select\"\r\n                                      ref={register({ required: true, validate: value => value !== 'Select...'})}> {\r\n                                accountOptions.map((option, label) => {\r\n                                    return (<option value={option.label}>{option.label}</option>)\r\n                                })\r\n                            }\r\n                        </Form.Control>\r\n                        {errors.accountType && \"Account Type is required\"}\r\n                    </Form.Group>\r\n\r\n                    <br />\r\n                    <Button variant=\"secondary\" size=\"sm\" className=\"btn-form\" type=\"submit\">Register</Button>\r\n                </Form>\r\n                \r\n                <br /><br />\r\n                <Link to=\"/\" className=\"btn btn-secondary\">Register</Link>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Register"]},"metadata":{},"sourceType":"module"}